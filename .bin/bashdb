#!/bin/bash

# ORIGINAL SOURCE: https://github.com/mug896/bash-stepping-xtrace

### ## Bash stepping xtrace
### 
### 
### Bash script that debug bash scripts and functions by stepping xtrace
### 
### [![Imgur](http://i.imgur.com/UcwgiFP.png)](https://youtu.be/GiBrChzc7UE)
### 
### 
### ## Installation
### 
### Copy **xtrace.sh** to $HOME/bin
### 
### 
### ## Usage
### 
### >xtrace.sh command arg1 arg2 ...
### 
### ```bash
### # Example 1 : shell script trace
### 
### $ xtrace.sh ./twolines.sh "linux" data.txt
### 
### 
### # Example 2 : shell function trace
### 
### $ f1() { __BASHDB_ON__; echo $1; date; echo $2 ;}
### $ export -f f1
### $ xtrace.sh f1 111 222
### ```
### 
### 
### Place `__BASHDB_ON__`, `__BASHDB_OFF__` in the scripts and functions that you want to debug
### 
### 1 . If you want debug whole script then just place `__BASHDB_ON__` on the top of the script
### 
### ```bash
### #!/bin/bash
### 
### __BASHDB_ON__
### 
### arr=() flag=0
### while read -r line; do  
###     if [[ $line =~ $regex ]]; then 
###         if [ $flag -eq 0 ]; then
###             echo ${arr[0]}
###             echo ${arr[1]}
### ...
### ...
### ```
### 2 . If you want debug script partially then place `__BASHDB_ON__` , `__BASHDB_OFF__` appropriately
### 
### ```bash
### #!/bin/bash
### ...
### ...
###         echo $line
###         flag=2
###     else
### __BASHDB_ON__
###         arr[0]=${arr[1]}
###         arr[1]=$line
###         if [ $flag -gt 0 ]; then
###             echo $line
###             let flag--
###             : :: flag = $flag
###         fi
### __BASHDB_OFF__
###     fi  
### done < "$datafile"
### ...
### ...
### ```
### 
### 3 . Stepping key : <kbd>Enter</kbd>
### 
### 4 . Exit key : <kbd>Ctrl-c</kbd>
### 
### 

#############################################################
#                                                           #
#   This script is for /bin/bash shell scripts              #
#   You can't use this script with /bin/sh shell scripts    #
#                                                           #
#############################################################

trap 'exec 2> /dev/null
    rm -f $pipe
    kill $print_pid
    kill -- -$target_pid'   EXIT

pipe=/tmp/pipe_$$
mkfifo $pipe

#####  Check usage

if [ ${#@} -eq 0 ]; then
    echo
    echo Usage: "$(basename $0)" command arg1 arg2 ...
    echo
    exit 1
else
    target_command=$1
    shift

    if ! grep -q -e "^__BASHDB_ON__" $target_command;
    then
        SCRIPT=`mktemp`
        trap "rm $SCRIPT" EXIT
        cat $target_command | sed '1s/#!.*/&\n__BASHDB_ON__/' > $SCRIPT
        chmod +x $SCRIPT
        target_command=$SCRIPT
    fi
fi


#####  Trace functions

__trap_debug__() {
    set -o monitor
    suspend -f

##########################################################
#                                                        #
#   This enable stepping in subshell.                    # 
#   If you want stepping in subshell then uncomment it   #
#                                                        #
##########################################################

    # set +o monitor 
}

__BASHDB_ON__() {
    echo --------- trace ON -----------
    set -o xtrace -o functrace 
    trap __trap_debug__ DEBUG
}
__BASHDB_OFF__() {
    trap - DEBUG
    set +o xtrace +o functrace 
    echo --------- trace OFF -----------
}

export -f __BASHDB_ON__ __BASHDB_OFF__ __trap_debug__


#####  Prompt for xtrace

export PS4='+\[\e[0;32m\]:\[\e[0;49;95m\]${LINENO}\[\e[0;32m\]:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\[\e[0m\]'


#####  Read from pipe and print xtrace

while read -r line; do
    case $line in
        *__BASHDB_OFF__* )  continue ;;
        *__trap_debug__* )  continue ;;
    esac
    echo "$line" >& 2
done < $pipe &

print_pid=$!


#####  Excute target command

# disable suspend
set -o monitor

# enable tracing for shell function
bash -c "$target_command"' "$0" "$@"' "$@" &> $pipe & 

target_pid=$!


#####  Trace !

while read line; do  
    if kill -0 $target_pid 2> /dev/null; then
        fg %% > /dev/null
    else
        exit
    fi
done

